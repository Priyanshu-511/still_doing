Browser History Manager
 ### Browser History Manager
 #### Overview
 The Browser History Manager simulates a browser's history
 navigation system. It uses three key data structures to handle various
 functionalities:
 1. **Stack**: Used for backward navigation.
 2. **Queue or Deque**: Used to maintain a list of recently visited
 pages and provide flexibility in operations.--
#### Key Features
 1. **Back Navigation**:
   - Allows the user to move back to the previous page.
   - Stores the current page in a forward navigation stack when
 moving back.
   - Ensures that the user can revisit pages recently navigated away
 from.
 2. **Forward Navigation**:
   - Allows the user to move forward to a page navigated back from.
   - Moves the page from the forward stack to the backward stack for
seamless navigation.
 3. **Display History List**:
   - Outputs the list of all visited pages.
   - Utilizes a queue or deque to provide an ordered view of the pages.
 4. **Clear Specific History**:
   - Allows users to remove specific pages from the history list.
   - Uses the deque for efficient removal at both ends or specific
 indices.
 5. **Clear All History**:
   - Clears the entire browsing history.
   - Resets all data structures, including the stacks and the deque.--
#### Data Structures Used
 1. **Stack**:
   - **Backward Stack**: Stores the pages visited before the current
 page for backward navigation.
   - **Forward Stack**: Temporarily stores pages navigated back from,
 allowing forward navigation.
 2. **Queue or Deque**:
   - Maintains a complete list of visited pages in the order they were
visited.
   - A deque is preferred for its efficient operations at both ends.--
#### Operation Workflow
 1. **Visit a Page**:
   - Push the current page onto the backward stack if there is one.
   - Clear the forward stack to maintain consistency.
   - Add the new page to the deque.
 2. **Back Navigation**:
   - Pop the last page from the backward stack and push it onto the
 forward stack.
   - Update the current page to the new top of the backward stack.
 3. **Forward Navigation**:
   - Pop the last page from the forward stack and push it onto the
 backward stack.
   - Update the current page to the newly moved page.
 4. **Display History**:
   - Traverse the deque to display all visited pages in order.
 5. **Clear Specific History**:
   - Remove a specific page by its index or value from the deque.
   - If the page is in the backward or forward stack, remove it from
 there as well.
 6. **Clear All History**:
   - Empty the backward stack, forward stack, and deque.--
#### Advantages of the Design
 1. **Efficient Navigation**:
   - Stacks provide quick access for back and forward operations.
 2. **Flexibility in History Management**:
   - The deque allows for efficient insertion, deletion, and traversal of
 history.
 3. **Clear Separation of Responsibilities**:
   - Each data structure has a specific role, ensuring modularity and
 clarity in operations.--
#### Limitations and Considerations
 1. **Memory Usage**:
   - Storing a large history in both the deque and stacks can consume
significant memory.
 2. **Consistency Between Structures**:
   - Extra care is needed to maintain synchronization between the
 deque and stacks during operations like clearing history.--
#### Potential Enhancements
 1. **Limit History Size**:
   - Implement a fixed size for the deque to automatically remove the
 oldest entries when the limit is reached.
 2. **Search Functionality**:
   - Allow users to search for specific pages in the history by keyword
 or URL.
 3. **Categorization**:
   - Organize history into categories or folders for easier navigation.
 4. **Bookmarking**:
   - Add functionality to bookmark specific pages and keep them
 separate from the browsing history.
 5. **Analytics**:
   - Provide insights into browsing patterns, such as frequently visited
sites or time spent on each page.--
### Summary
 This Browser History Manager effectively combines stacks and
 deques to provide a robust solution for managing browser navigation
 and history. Its modular design ensures ease of extension and
 adaptability for additional features, making it suitable for various
 browsing applications.
